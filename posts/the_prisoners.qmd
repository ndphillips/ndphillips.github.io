--- 
author: "Nathaniel Phillips" 
categories: [R, Simulation] 
date: 2024-04-21
draft: true
format:
  html:
    toc: true
    toc-location: left
    code-fold: true
description: "The Riddle that Seems Impossible Even If You Know the Answer" 
title: "The Prisoner Riddle" 
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.path = "man/figures/README-",
  out.width = "100%", eval = FALSE,
  fig.width = 7, fig.height = 7
)
```

{{< video https://youtu.be/iSNsgj1OCLA?si=tYpBJ8sswvJUsXmP >}}

Sometime in early 2024, someone shared a YouTube video with me titled "The Riddle that Seems Impossible Even if You Know the Answer" from the channel [Veritasium](https://www.youtube.com/@veritasium).

I probably watched that video 10 times in a row. The answer seemed so counter-intuitive. That week, I told *everyone* I met about the riddle.

# Setup

## The Riddle

![](https://en.wikipedia.org/wiki/File:100_prisoners_problem_qtl1.svg)

Here's the riddle (see [https://en.wikipedia.org/wiki/100_prisoners_problem](https://en.wikipedia.org/wiki/100_prisoners_problem) for more details)

> The director of a prison offers 100 death row prisoners, who are numbered from 1 to 100, a last chance. A room contains a cupboard with 100 drawers. The director randomly puts one prisoner's number in each closed drawer. The prisoners enter the room, one after another. Each prisoner may open and look into 50 drawers in any order. The drawers are closed again afterwards. If, during this search, every prisoner finds their number in one of the drawers, all prisoners are pardoned. If even one prisoner does not find their number, all prisoners die. Before the first prisoner enters the room, the prisoners may discuss strategy â€” but may not communicate once the first prisoner enters to look in the drawers. What is the prisoners' best strategy?

So what's the answer? See it below

::: {.callout-caution collapse="true" title="The Optimal Strategy"}

1. Each prisoner first opens the drawer labeled with their own number.
1. If this drawer contains their number, they are done and were successful.
1. Otherwise, the drawer contains the number of another prisoner, and they next open the drawer labeled with this number.
1. The prisoner repeats steps 2 and 3 until they find their own number, or fail because the number is not found in the first fifty opened drawers.
:::

I wanted to try simulating the optimal strategy in R.

## Goals

The goals of this project are as follows:

1. Simulate the game using two different approaches.
2. Compare the simulated performance of the optimal strategy to the mathematical solution.
3. Create an animation showing the 

## Simulation Methods

| Method | Description |
| --- | --- |
| Agent | Simulate the game using an agent-based approach |
| Environmental | Simulate the game using an environmental classification approach |

# Method 1: Agent-Based Simulation

* What is an agent based simulation? 
* What are the pros and cons?
* How will it work for this problem?

## Functions

```{r}
library(prisonersriddle)
```


Here are the functions we'll create. 

| Function | Description |
| --- | --- |
|`create_room()` | Create a room of boxes with tickets|
| `simulate_game_agent()` | Simulate the prisoners and boxes game across multiple groups of prisoners and return aggregate results|

## Results

Below I'll run a simulation with 100 prisoners across 10 different rooms

```{r}
set.seed(123)
result_agent <- simulate_prisoner_game(
  prisoners_n = 100,
  teams_n = 10,
  method = "agent"
)
```

Let's look at the results:

```{r}
result_agent$summaries$p_success

hist(result_agent$outcomes$boxes_opened_n_max)

result_agent$processing$sim_duration
```

## Conclusions

* What did we find?
    * Answers
    * Processing times
    * etc.

# Method 2: Environment Classification

* What is an environment classification approach?
* What are the pros and cons?
* How will it work for this problem?

## Functions

Here are the functions we'll create. 

| Function | Verb | Description |
| --- | --- |
|`simulate_game_loops()` | `simulate_game_*()` | Simulate the prisoners and boxes game across multiple groups of prisoners and return aggregate results|
| `add_loops()` | `add_*()`| Add loop classifications to a room object |
| `set_box_loop_and_index()`| `set_*()`| Set the box, loop, and index for a room object |
| `get_last_ticket()`, `get_last_index_in_loop()`, `get_start_box_in_loop()`, `get_current_loop()`| `get*()`| Various helper functions to get information from a room object |
| `assert_valid_room()` | `assert_*()`| Assert that a room object is valid |

## Results

```{r}
set.seed(123)
result_environment <- simulate_prisoner_game(
  prisoners_n = 100,
  teams_n = 10,
  method = "environment"
)
```

Let's look at the results:

```{r}
mean(result_environment$team_tbl$is_success)

hist(result_environment$team_tbl$boxes_opened_n_max)

result_environment$processing$sim_duration
```

# Comparison


# Conclusions

* What did we find?
    * Answers
    * Processing times
    * etc.

# Wrap-Up

- Create a `plot_simulation()` function to vizualize the results

# Next Steps

# Appendix

## Session Info

```{r}
sessionInfo()
```
